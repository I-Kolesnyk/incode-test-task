{"version":3,"file":"static/js/345.2247c1f9.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.tsx","components/LoginView/LoginView.tsx","components/RegisterForm/RegisterForm.tsx","components/RegistrationView/RegistrationView.tsx","pages/AuthPage/AuthPage.tsx"],"sourcesContent":["import React, {FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { userSignIn } from 'redux/auth/operations';\r\nimport { AppDispatch } from 'redux/store';\r\n\r\ntype FormData = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nconst LoginForm : FC = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    formState,\r\n  } = useForm<FormData>({\r\n    defaultValues: {\r\n      username: '',\r\n      password: '',\r\n    },\r\n  });\r\n\r\n  const loginUser = (user: FormData) => {\r\n    console.log(user);\r\n    dispatch(userSignIn(user));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (formState.isSubmitSuccessful) {\r\n      reset();\r\n    }\r\n  }, [formState.isSubmitSuccessful, reset]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(loginUser)}>\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Example123\"\r\n          autoComplete=\"off\"\r\n          {...register('username')}\r\n        />\r\n        {errors.username && <div>{errors.username?.message}</div>}\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"***************\"\r\n          autoComplete=\"off\"\r\n          {...register('password')}\r\n        />\r\n        {errors.password && <div>{errors.password?.message}</div>}\r\n      </label>\r\n      <button type=\"submit\">Sign In</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { FC } from 'react';\r\nimport LoginForm from 'components/LoginForm';\r\n\r\ntype LoginViewProps = {\r\n  setIsNewUser: (active: boolean) => void;\r\n};\r\n\r\nconst LoginView: FC<LoginViewProps> = ({ setIsNewUser }) => {\r\n  const handleRegistration = () => {\r\n    setIsNewUser(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Sign in</h1>\r\n      <div>\r\n        <LoginForm />\r\n        <p>Donâ€™t have account yet? </p>\r\n        <button onClick={handleRegistration}>New Account</button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginView;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { userSignUp } from 'redux/auth/operations';\r\nimport { AppDispatch } from 'redux/store';\r\n\r\ntype FormData = {\r\n  username: string;\r\n  password: string;  \r\n  displayName: string;\r\n};\r\n\r\nconst RegisterForm: FC = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    formState,\r\n  } = useForm<FormData>({\r\n    defaultValues: {\r\n      username: '',\r\n      password: '',\r\n      displayName: '',      \r\n    },\r\n  });\r\n\r\n  const registerUser = (user: FormData) => {\r\n    dispatch(userSignUp(user));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (formState.isSubmitSuccessful) {\r\n      reset();\r\n    }\r\n  }, [formState.isSubmitSuccessful, reset]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(registerUser)}>\r\n      <label>\r\n        Full Name\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Example Name\"\r\n          autoComplete=\"off\"\r\n          {...register('username')}\r\n        />\r\n        {errors.username && <div>{errors.username?.message}</div>}\r\n      </label>\r\n      <label>\r\n        Full Name\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Example123\"\r\n          autoComplete=\"off\"\r\n          {...register('displayName')}\r\n        />\r\n        {errors.username && <div>{errors.username?.message}</div>}\r\n      </label>\r\n      <label>\r\n        Password\r\n        <input type=\"password\" autoComplete=\"off\" {...register('password')} />\r\n        {errors.password && <div>{errors.password?.message}</div>}\r\n      </label>\r\n      {/* <label>\r\n        Confirm Password\r\n        <input\r\n          type=\"password\"\r\n          autoComplete=\"off\"\r\n          {...register('confirmPassword')}\r\n        />\r\n        {errors.password && <div>{errors.password?.message}</div>}\r\n      </label> */}\r\n      <button type=\"submit\">Sign Up</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { FC } from 'react';\r\nimport RegisterForm from 'components/RegisterForm';\r\n\r\nconst RegistrationView: FC = () => {\r\n  return (\r\n    <>\r\n      <h1>Sign upggg</h1>\r\n      <div>\r\n        <RegisterForm />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegistrationView;\r\n","import React, {FC, useState} from 'react';\r\nimport LoginView from 'components/LoginView';\r\nimport RegistrationView from 'components/RegistrationView';\r\n\r\nconst AuthPage : FC = () => {\r\n  const [isNewUser, setIsNewUser] = useState<boolean>(false);\r\n\r\n  return (\r\n    <>\r\n    {isNewUser ? <RegistrationView/> : <LoginView setIsNewUser = {setIsNewUser}/> }      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n"],"names":["_errors$username","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","username","password","register","handleSubmit","errors","formState","reset","useEffect","isSubmitSuccessful","_jsxs","onSubmit","user","console","log","userSignIn","children","_jsx","_objectSpread","type","placeholder","autoComplete","message","_ref","setIsNewUser","_Fragment","LoginForm","onClick","_errors$username2","displayName","userSignUp","RegisterForm","_useState","useState","_useState2","_slicedToArray","isNewUser","RegistrationView","LoginView"],"sourceRoot":""}